/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpactor.json
.phpunit.result.cache
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/auth.json
/.fleet
/.idea
/.nova
/.vscode
/.zed





































"use client";
import { useState } from "react";
import { Search, ThermometerSun, Wind, Droplets } from "lucide-react";

interface WeatherData {
  temp: number;
  feels_like: number;
  humidity: number;
  description: string;
  wind_speed: number;
  city: string;
  icon: string;
  forecast: Array<{
    date: string;
    temp: number;
    description: string;
    icon: string;
  }>;
}

interface WeatherDashboardProps {
  apiKey?: string;
  defaultCity?: string;
}

const WeatherDashboard = ({
  apiKey = process.env.NEXT_PUBLIC_WEATHER_API_KEY,
  defaultCity = "London",
}: WeatherDashboardProps) => {
  const [city, setCity] = useState(defaultCity);
  const [weather, setWeather] = useState<WeatherData | null>(null);
  const [isCelsius, setIsCelsius] = useState(true);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchWeather = async (cityName: string) => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`
      );

      if (!response.ok) throw new Error("City not found");

      const data = await response.json();

      const forecastResponse = await fetch(
        `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${apiKey}&units=metric`
      );

      const forecastData = await forecastResponse.json();

      setWeather({
        temp: data.main.temp,
        feels_like: data.main.feels_like,
        humidity: data.main.humidity,
        description: data.weather[0].description,
        wind_speed: data.wind.speed,
        city: data.name,
        icon: data.weather[0].icon,
        forecast: forecastData.list
          .filter((item: any) => item.dt_txt.includes("12:00:00"))
          .slice(0, 3)
          .map((item: any) => ({
            date: item.dt_txt,
            temp: item.main.temp,
            description: item.weather[0].description,
            icon: item.weather[0].icon,
          })),
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to fetch weather data");
      setWeather(null);
    } finally {
      setLoading(false);
    }
  };

  const convertTemp = (temp: number): string =>
    isCelsius ? `${Math.round(temp)}°C` : `${Math.round((temp * 9) / 5 + 32)}°F`;

  return (
    <div className="min-h-screen bg-white text-black p-6">
      {/* Top Bar */}
      <header className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <img src="https://pawait.africa/wp-content/uploads/2024/08/full-logo.png" alt="PawaIT Logo" className="h-30 w-40" />
          <h1 className="text-2xl font-bold">PawaIT Weather App</h1>
        </div>
      </header>

      <div className="flex flex-col md:flex-row gap-8">
        {/* Left Side Panel */}
        <aside className="w-full md:w-1/3 border p-4 rounded-lg bg-gray-50 text-center">
        <img
            src="https://cdn-icons-png.flaticon.com/512/1163/1163661.png"
            alt="Weather Icon"
            className="mx-auto h-24 mb-4"
             />
          {weather ? (
            <>
              <h2 className="text-xl font-semibold mb-2">{weather.description}</h2>
              <p className="mb-2">Feels like: {convertTemp(weather.feels_like)}</p>
              <p className="mb-4">Humidity: {weather.humidity}%</p>
              <div className="text-sm text-gray-600">
                {weather.temp > 30 && "It's quite hot, stay hydrated!"}
                {weather.temp <= 30 && weather.temp > 15 && "Mild weather — enjoy your day!"}
                {weather.temp <= 15 && "It's cool, wear a jacket!"}
              </div>
            </>
          ) : (
            <p className="text-gray-500">Weather info will appear here</p>
          )}
        </aside>

        {/* Right Main Panel */}
        <main className="w-full md:w-2/3">
          {/* Search and Toggle */}
          <div className="flex items-center gap-2 mb-6">
            <Search className="h-5 w-5 text-black" />
            <input
              type="text"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              placeholder="Enter city name"
              className="flex-1 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black bg-white"
            />
            <button
              onClick={() => fetchWeather(city)}
              disabled={loading}
              className="px-4 py-2 bg-blue-500 text-black rounded-md hover:bg-blue-600 disabled:opacity-50"
            >
              {loading ? "Loading..." : "Search"}
            </button>
            <button
              onClick={() => setIsCelsius(!isCelsius)}
              className="px-4 py-2 border border-black rounded-md hover:bg-gray-100 text-black flex items-center"
            >
              <ThermometerSun className="h-4 w-4 mr-2" />
              {isCelsius ? "°F" : "°C"}
            </button>
          </div>

          {/* Error */}
          {error && <div className="text-red-500 mb-4">{error}</div>}

          {/* Weather Data */}
          {weather && (
            <>
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-4xl font-bold">{weather.city}</h2>
                  <p>{new Date().toLocaleDateString()}</p>
                </div>
                <div className="text-center">
                  <img
                    src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}
                    alt={weather.description}
                    className="w-24 h-24 mx-auto"
                  />
                  <p className="text-2xl font-bold mt-2">{convertTemp(weather.temp)}</p>
                  <p>{weather.description}</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="border rounded-lg p-4">
                  <h3 className="text-sm font-semibold mb-2">Wind</h3>
                  <div className="flex items-center gap-2">
                    <Wind className="h-5 w-5 text-black" />
                    <span>{weather.wind_speed} km/h</span>
                  </div>
                </div>
                <div className="border rounded-lg p-4">
                  <h3 className="text-sm font-semibold mb-2">Humidity</h3>
                  <div className="flex items-center gap-2">
                    <Droplets className="h-5 w-5 text-black" />
                    <span>{weather.humidity}%</span>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-xl font-semibold mb-4">3-Day Forecast</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {weather.forecast.map((day, index) => (
                    <div key={index} className="border rounded-lg p-4 text-center">
                      <p className="text-sm mb-2">
                        {new Date(day.date).toLocaleDateString()}
                      </p>
                      <img
                        src={`http://openweathermap.org/img/wn/${day.icon}@2x.png`}
                        alt={day.description}
                        className="w-16 h-16 mx-auto"
                      />
                      <p className="text-lg font-bold mt-2">{convertTemp(day.temp)}</p>
                      <p className="text-sm">{day.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            </>
          )}
        </main>
      </div>
    </div>
  );
};

export default WeatherDashboard;













"use client"

import { useState } from "react";
import SearchBox from "../components/SearchBox";
import WeatherCard from "../components/WeatherCard";
import TempToggle from "../components/TempToggle";
import WeatherForecast from "../components/WeatherForecast";

export default function Home() {
  const [weatherData, setWeatherData] = useState<any>(null);
  const [unit, setUnit] = useState<"metric" | "imperial">("metric");
  const [forecastData, setForecastData] = useState<any[]>([]);

  const handleSearch = async (city: string) => {
    try {
      const response = await fetch(
        `http://localhost:8000/api/weather?city=${city}&unit=${unit}`
      );
      const data = await response.json();
      
      setWeatherData(data.current.main);
      setForecastData(data.forecast.slice(0, 3).map((forecast: any) => ({
        date: new Date(forecast.dt * 1000).toLocaleDateString(),
        temperature: forecast.main.temp,
        description: forecast.weather[0].description,
        icon: forecast.weather[0].icon
      })));
    } catch (error) {
      console.error("Error fetching weather data:", error);
    }
  };

  const toggleUnit = () => {
    setUnit(unit === "metric" ? "imperial" : "metric");
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center py-8">
      <SearchBox onSearch={handleSearch} />

      {weatherData && (
        <>
          <WeatherCard
            temperature={weatherData.temp}
            description={weatherData.description}
            icon={weatherData.icon}
          />

          <TempToggle unit={unit} onToggle={toggleUnit} />

          <WeatherForecast forecast={forecastData} />
        </>
      )}
    </div>
  );
}
